[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "enhanced-automatic-shifted-log"
version = "0.1.0"
description = "Enhanced Automatic Shifted Log Transformer with Monte Carlo optimization"
readme = "README.md"
requires-python = ">=3.7"
license = {text = "MIT"}
authors = [
    {name = "Muhammad Akmal Husain", email = "akmalhusain2003@gmail.com"}
]
maintainers = [
    {name = "Muhammad Akmal Husain", email = "akmalhusain2003@gmail.com"}
]
keywords = [
    "data-transformation",
    "log-transformation", 
    "normality",
    "monte-carlo-optimization",
    "statistical-preprocessing",
    "data-science",
    "machine-learning",
    "numba-acceleration",
    "feng-transformation",
    "adaptive-algorithms"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8", 
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

dependencies = [
    "numpy>=1.19.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "scipy>=1.7.0",
    "numba>=0.50.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.10",
    "pytest-xdist>=2.2",
    "black>=21.0",
    "flake8>=3.9",
    "isort>=5.9",
    "mypy>=0.910",
    "pre-commit>=2.15",
    "jupyter>=1.0.0",
    "matplotlib>=3.3.0",
    "seaborn>=0.11.0"
]

test = [
    "pytest>=6.0",
    "pytest-cov>=2.10",
    "pytest-xdist>=2.2",
    "hypothesis>=6.0"
]

docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "numpydoc>=1.1",
    "myst-parser>=0.15"
]

examples = [
    "jupyter>=1.0.0",
    "matplotlib>=3.3.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0"
]

performance = [
    "numba>=0.56.0",  # Latest numba for better performance
    "llvmlite>=0.39.0"
]

all = [
    "enhanced-automatic-shifted-log[dev,test,docs,examples,performance]"
]

[project.urls]
Homepage = "https://github.com/AkmalHusain2003/enhanced-automatic-shifted-log"
Repository = "https://github.com/AkmalHusain2003/enhanced-automatic-shifted-log.git"
Documentation = "https://enhanced-automatic-shifted-log.readthedocs.io"
Changelog = "https://github.com/AkmalHusain2003/enhanced-automatic-shifted-log/blob/main/CHANGELOG.md"
Issues = "https://github.com/AkmalHusain2003/enhanced-automatic-shifted-log/issues"

[project.scripts]
aslt-benchmark = "enhanced_aslt.cli:benchmark_command"
aslt-validate = "enhanced_aslt.cli:validate_command"

[tool.setuptools]
packages = ["enhanced_aslt"]
include-package-data = true

[tool.setuptools.package-data]
enhanced_aslt = ["py.typed", "*.pyi"]

[tool.setuptools.dynamic]
# Optional: If you want to read version from __init__.py
# version = {attr = "enhanced_aslt.__version__"}

# Black code formatter configuration
[tool.black]
line-length = 100
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["enhanced_aslt"]
known_third_party = [
    "numpy", "pandas", "scipy", "sklearn", "numba", 
    "matplotlib", "seaborn", "jupyter", "pytest"
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=enhanced_aslt",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmarks",
    "monte_carlo: marks tests related to Monte Carlo optimization"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["enhanced_aslt"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
    "*/cli.py"  # Command line interface
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# MyPy type checking configuration
[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "sklearn.*",
    "numba.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*"
]
ignore_missing_imports = true

# Flake8 linting configuration (in setup.cfg format for compatibility)
[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E266",  # too many leading '#' for block comment
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "F401",  # module imported but unused (handled by isort)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
    "docs/"
]
per-file-ignores = [
    "__init__.py:F401"
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/psf/black",
        rev = "22.3.0",
        hooks = [
            {id = "black", language_version = "python3"}
        ]
    },
    {
        repo = "https://github.com/pycqa/isort", 
        rev = "5.10.1",
        hooks = [
            {id = "isort"}
        ]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "4.0.1", 
        hooks = [
            {id = "flake8"}
        ]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v0.950",
        hooks = [
            {id = "mypy", additional_dependencies = ["types-all"]}
        ]
    }
]

# Sphinx documentation configuration
[tool.sphinx]
source-dir = "docs/source"
build-dir = "docs/build"

# Additional tool configurations for development workflow
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37,py38,py39,py310,py311,flake8,mypy,coverage
isolated_build = true

[testenv]
deps = 
    pytest>=6.0
    pytest-cov>=2.10
    hypothesis>=6.0
commands = 
    pytest {posargs}

[testenv:flake8]
deps = flake8>=3.9
commands = flake8 enhanced_aslt tests

[testenv:mypy]
deps = 
    mypy>=0.910
    types-all
commands = mypy enhanced_aslt

[testenv:coverage]
deps = 
    pytest>=6.0
    pytest-cov>=2.10
    coverage[toml]>=6.0
commands = 
    coverage run -m pytest
    coverage report
    coverage html
"""

# Performance profiling configuration
[tool.profile]
sort = "cumulative"
lines = 50
output = "profile_results.txt"